-- CITY_T
DROP TABLE "NEPTIS".CITY_T;
create table "NEPTIS".CITY_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	NAME VARCHAR(50) not null,
	REGION VARCHAR(50) not null,
	UNIQUE ("NAME", "REGION")
);

DROP TABLE "NEPTIS".ATTRACTION_C_T;
create table "NEPTIS".ATTRACTION_C_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	NAME VARCHAR(50) not null,
	CITY_T BIGINT not null,
	LATITUDE VARCHAR(10) not null,
	LONGITUDE VARCHAR(10) not null,
	UNIQUE ("NAME", "CITY_T"),
    FOREIGN KEY(CITY_T) REFERENCES CITY_T(ID)
);



-- MUSEUM_T
DROP TABLE "NEPTIS".MUSEUM_T;
create table "NEPTIS".MUSEUM_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	NAME VARCHAR(50) not null,
	CITY_T BIGINT not null,
	UNIQUE ("NAME", "CITY_T"),
	FOREIGN KEY(CITY_T) REFERENCES CITY_T(ID)
);

DROP TABLE "NEPTIS".AREA_M_T;
create table "NEPTIS".AREA_M_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	NAME VARCHAR(50) not null,
	MUSEUM_T BIGINT not null,
	UNIQUE ("NAME", "MUSEUM_T"),
	FOREIGN KEY(MUSEUM_T) REFERENCES MUSEUM_T(ID)
);

DROP TABLE "NEPTIS".ATTRACTION_M_T;
create table "NEPTIS".ATTRACTION_M_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	NAME VARCHAR(50) not null,
	AREA_M_T BIGINT not null,
	UNIQUE ("NAME", "AREA_M_T"),
	FOREIGN KEY(AREA_M_T) REFERENCES AREA_M_T(ID)
);



-- OPENED AIR MUSEUM_T
DROP TABLE "NEPTIS".OAM_T;
create table "NEPTIS".OAM_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	NAME VARCHAR(50) not null,
	CITY_T BIGINT not null,
	UNIQUE ("NAME", "CITY_T"),
	FOREIGN KEY(CITY_T) REFERENCES CITY_T(ID)
);

DROP TABLE "NEPTIS".AREA_OAM_T;
create table "NEPTIS".AREA_OAM_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	NAME VARCHAR(50) not null,
	OAM_T BIGINT not null,
	UNIQUE ("NAME", "OAM_T"),
	FOREIGN KEY(OAM_T) REFERENCES OAM_T(ID)
);

DROP TABLE "NEPTIS".ATTRACTION_OAM_T;
create table "NEPTIS".ATTRACTION_OAM_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	NAME VARCHAR(50) not null,
	AREA_OAM_T BIGINT not null,
	UNIQUE ("NAME", "AREA_OAM_T"),
	FOREIGN KEY(AREA_OAM_T) REFERENCES AREA_OAM_T(ID)
);



-- ADMIN_T
DROP TABLE "NEPTIS".ADMIN_T;
create table "NEPTIS".ADMIN_T
(
	NAME VARCHAR(50) not null,
	SURNAME VARCHAR(50) not null,
	BADGEID VARCHAR(50) not null primary key,
	EMAIL VARCHAR(50) not null,
	PASSWORD VARCHAR(50) not null
);



-- USER
DROP TABLE "NEPTIS".USERS_T;
create table "NEPTIS".USERS_T
(
	NAME VARCHAR(50) not null,
	SURNAME VARCHAR(50) not null,
	EMAIL VARCHAR(50) not null primary key,
	PASSWORD VARCHAR(50) not null
);



-- TCODA_T
DROP TABLE "NEPTIS".TCODA_T;
create table "NEPTIS".TCODA_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	MINUTES int not null,
	ATTRACTION_C_T BIGINT,
	ATTRACTION_M_T BIGINT,
	ATTRACTION_OAM_T BIGINT,
	AREA_M_T BIGINT,
	AREA_OAM_T BIGINT,
	FOREIGN KEY(ATTRACTION_C_T) REFERENCES ATTRACTION_C_T(ID),
	FOREIGN KEY(ATTRACTION_M_T) REFERENCES ATTRACTION_M_T(ID),
    FOREIGN KEY(ATTRACTION_OAM_T) REFERENCES ATTRACTION_OAM_T(ID),
	FOREIGN KEY(AREA_M_T) REFERENCES AREA_M_T(ID),
	FOREIGN KEY(AREA_OAM_T) REFERENCES AREA_OAM_T(ID)
);



-- TVISITA_T
DROP TABLE "NEPTIS".TVISITA_T;
create table "NEPTIS".TVISITA_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	MINUTES int not null,
	ATTRACTION_C_T BIGINT,
	ATTRACTION_M_T BIGINT,
	ATTRACTION_OAM_T BIGINT,
	FOREIGN KEY(ATTRACTION_C_T) REFERENCES ATTRACTION_C_T(ID),
	FOREIGN KEY(ATTRACTION_M_T) REFERENCES ATTRACTION_M_T(ID),
    FOREIGN KEY(ATTRACTION_OAM_T) REFERENCES ATTRACTION_OAM_T(ID)

);

-- TMOVEAT_T (attrazioni)
DROP TABLE "NEPTIS".TMOVEAT_T;
create table "NEPTIS".TMOVEAT_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	MINUTES int not null,
	ATTRACTION_C_T1 BIGINT,
	ATTRACTION_M_T1 BIGINT,
	ATTRACTION_OAM_T1 BIGINT,
	ATTRACTION_C_T2 BIGINT,
	ATTRACTION_M_T2 BIGINT,
	ATTRACTION_OAM_T2 BIGINT,
	FOREIGN KEY(ATTRACTION_C_T1) REFERENCES ATTRACTION_C_T(ID),
	FOREIGN KEY(ATTRACTION_C_T2) REFERENCES ATTRACTION_C_T(ID),
	FOREIGN KEY(ATTRACTION_M_T1) REFERENCES ATTRACTION_M_T(ID),
	FOREIGN KEY(ATTRACTION_M_T2) REFERENCES ATTRACTION_M_T(ID),
	FOREIGN KEY(ATTRACTION_OAM_T1) REFERENCES ATTRACTION_OAM_T(ID),
	FOREIGN KEY(ATTRACTION_OAM_T2) REFERENCES ATTRACTION_OAM_T(ID)
     
);

-- TMOVEAR_T (aree)
DROP TABLE "NEPTIS".TMOVEAR_T;
create table "NEPTIS".TMOVEAR_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	MINUTES int not null,
	AREA_M_T1 BIGINT,
	AREA_OAM_T1 BIGINT,
	AREA_M_T2 BIGINT,
	AREA_OAM_T2 BIGINT,
	FOREIGN KEY(AREA_M_T1) REFERENCES AREA_M_T(ID),
	FOREIGN KEY(AREA_OAM_T1) REFERENCES AREA_OAM_T(ID),
	FOREIGN KEY(AREA_M_T2) REFERENCES AREA_M_T(ID),
	FOREIGN KEY(AREA_OAM_T2) REFERENCES AREA_OAM_T(ID)
);


-- TMOVEAA_T (attrazione-area) --> ** NB: da fissare nel parser anche il percorso contrario (area-attrazione) **
DROP TABLE "NEPTIS".TMOVEAA_T;
create table "NEPTIS".TMOVEAA_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	MINUTES int not null,
	ATTRACTION_C_T BIGINT,
	ATTRACTION_M_T BIGINT,
	ATTRACTION_OAM_T BIGINT,
	AREA_M_T BIGINT,
	AREA_OAM_T BIGINT,
	FOREIGN KEY(ATTRACTION_C_T) REFERENCES ATTRACTION_C_T(ID),
	FOREIGN KEY(ATTRACTION_M_T) REFERENCES ATTRACTION_M_T(ID),
	FOREIGN KEY(ATTRACTION_OAM_T) REFERENCES ATTRACTION_OAM_T(ID),
	FOREIGN KEY(AREA_M_T) REFERENCES AREA_M_T(ID),
	FOREIGN KEY(AREA_OAM_T) REFERENCES AREA_OAM_T(ID)
	
);


-- SENSING_T
DROP TABLE "NEPTIS".SENSING_T;
create table "NEPTIS".SENSING_T
(
	ID BIGINT not null primary key GENERATED ALWAYS AS IDENTITY(START WITH 1, INCREMENT BY 1),
	DATA TIMESTAMP not null,
	TCODA_T BIGINT,
	TVISITA_T BIGINT,
	TMOVEAT_T BIGINT,
	TMOVEAR_T BIGINT,
	TMOVEAA_T BIGINT,
	FOREIGN KEY(TCODA_T) REFERENCES TCODA_T(ID),
	FOREIGN KEY(TVISITA_T) REFERENCES TVISITA_T(ID),
	FOREIGN KEY(TMOVEAT_T) REFERENCES TMOVEAT_T(ID),
	FOREIGN KEY(TMOVEAR_T) REFERENCES TMOVEAR_T(ID),
	FOREIGN KEY(TMOVEAA_T) REFERENCES TMOVEAA_T(ID)

);

-- DROP INDEX ?
CREATE INDEX index_timestamp ON "NEPTIS".SENSING_T(DATA);


